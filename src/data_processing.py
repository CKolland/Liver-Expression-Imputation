from anndata import AnnData
from torch import float32, tensor, Tensor
from torch.utils.data import Dataset


class ImputationDataset(Dataset):
    """A dataset used for data imputation using an annotated data matrix.

    A dataset class that inherits from `torch.utils.data.Dataset`.
    The Dataset takes an `AnnData` object as input. A list of column entries needs to be provided
    as an additional input to construct the model input. The whole matrix is then used as
    reconstruction label for the model.
    """

    def __init__(self, adata: AnnData, input_subset: list[str]):
        """Initialize the dataset.

        :param AnnData adata: The annotated data matrix
        :param list[str] input_subset: List of gene names that are used as input
        """
        self.adata = adata
        self.input_subset = input_subset

    def __len__(self) -> int:
        """Return the number of samples in the dataset.

        :return: Number of rows (cells) in the AnnData object
        :rtype: int
        """
        return self.adata.shape[0]

    def __getitem__(self, idx: int) -> tuple[Tensor, Tensor]:
        """Retrieve the input features and corresponding label for a given index.

        The `input` tensor is generated by selecting the specified features from the annotated data
        matrix, as defined by `input_subset`. The `label` tensor consists of the entire row for the
        given sample.

        :param int idx: Index of the sample to retrieve

        :return: A tuple containing the input tensor and the label tensor
        :rtype: tuple[Tensor, Tensor]

        :raises IndexError: If the provided index is out of range
        """
        if idx >= len(self):
            raise IndexError("Index out of range")

        # Select row of reduced features from AnnData object
        # `.toarray()` converts to dense array
        # `.squeeze()` converts to one-dimensional vector
        input = self.adata[:, self.input_subset].X.getrow(idx).toarray().squeeze()

        # Retrieve the corresponding annotation label
        label = self.adata.X.getrow(idx).toarray().squeeze()

        # Convert the row to a PyTorch tensor
        return tensor(input, dtype=float32), tensor(label, dtype=float32)

    def get_cell_type(self, idx: int) -> str:
        """Retrieve the cell type annotation for a given index.

        Not yet implemented!

        :param int idx: Index of the sample.

        :return: Cell type annotation for the specified sample
        :rtype: str
        """
        pass
